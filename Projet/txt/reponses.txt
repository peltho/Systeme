Question 2a
===========

Les deux instructions permettent de réserver la mémoire d'un processus.
STMEM seulement pour le processus courant (utilisable en mode utilisateur)
Avec STPRM on peut réserver la mémoire de n'importe quel processus (à utiliser en mode maître)
LDPSW : il suffit pour le noayu, de faire ldpsw d'un proc P,
pour se brancher sur le code de P ; car cette instruction permet de charger l'état du processus quand il a été arrêté,
dans le cadre d'un changement de contexte notamment.

Question 2b
===========

- Le pid du processus <- 0 = exit
- Charge R0 dans R1 qui contient le PID du processus
- Récupère l'adresse du processus (le stocke dans R2)
- R0 vaut l'adresse du processus
- R3 prend pour valeur l'état du processus (à savoir 0)
- Stocke dans R0 l'état du processus
- Retourne à int1 / changement de processus

Par le terme de processus on désigne le processus courant.

Question 2c
===========

Chaque processus contient divers registres tels que spReg, pcReg, mdReg, prReg qui sont stockés dans la mémoire.
Ces registres sont stockés à différents endroits de la mémoire selon que l'opération effectuée sur le processus soit le chargement de celui-ci,
ou bien sa sauvegarde dans la tranche mémoire du noyau.

Question 2d
===========

La ligne 168 de Proc_0_Program.asm sert à stocker la valeur 0 dans la sémaphore pour obtenir V()

Les sémaphores sont binaires, pour passer en mode V(), il faut lui faire prendre la valeur 0.
Pour passer en mode P(), il faut lui passer la valeur 1.

Question 2e
===========

La tranche mémoire du noyau contient plusieurs adresses, notamment KERNELSAVECURRENTPROCID qui contient l'adresse du processus courant sauvegardé.
Il y a également le vecteur d'interruptions, les tables d'état des processus
et le vecteur d'adresses de début des vecteurs de requêtes de semop par processsus.
Y sont également stockés les items (leur type, nombre, etc.) // à développer

Question 2f
===========

9 processus maximum
9 semops
