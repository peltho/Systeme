Question 2a
===========

Les deux instructions permettent de réserver la mémoire d'un processus.
STMEM seulement pour le processus courant (utilisable en mode utilisateur)
Avec STPRM on peut réserver la mémoire de n'importe quel processus (à utiliser en mode maître)
LDPSW : il suffit pour le noyau, de faire LDPSW d'un processus P,
pour se brancher sur le code de P car cette instruction permet de charger l'état du processus quand il a été arrêté,
dans le cadre d'un changement de contexte notamment.

Question 2b
===========

SETRI R0 0         ; stocke la valeur 0 dans R0
LDMEM R0 R1        ; charge R0 dans R1 pour obtenir le PID du processus à arreter
SETRI R2 20        ; stocke la valeur 20 dans R2
ADDRG R0 R1 R2     ; stocke R1 + R2 (0 + 20) dans R0 pour obtenir l'@ du processus
SETRI R3 0         ; stocke la valeur 0 dans R3, qui correspondra à son état
STMEM R0 R3        ; stocke 0 à R0, donc à l'@ du processus, ce qui a pour effet de le terminer
JMBSI $int1        ; on retourne à int1 pour élire un nouveau processus

Question 2c
===========

Chaque processus contient divers registres tels que spReg, pcReg, mdReg, prReg qui sont stockés dans la mémoire.
Ces registres sont stockés à différents endroits de la mémoire selon que l'opération effectuée sur le processus soit le chargement de celui-ci,
ou bien sa sauvegarde dans la tranche mémoire du noyau.

Question 2d
===========

La ligne 168 de Proc_0_Program.asm sert à stocker la valeur 0 dans la sémaphore pour obtenir V(), donc pour la relâcher.

Les sémaphores sont binaires, pour passer en mode V(), il faut lui faire prendre la valeur 0.
Pour passer en mode P(), il faut lui passer la valeur 1.

Question 2e
===========

La tranche mémoire du noyau contient plusieurs adresses, notamment l'adresse KERNELSAVECURRENTPROCID qui contient le PID du processus courant sauvegardé.
Il y a également le vecteur d'interruptions, les tables d'état des processus
et le vecteur d'adresses de début des vecteurs de requêtes de semop par processsus.
Y sont également stockés les items, notamment leur valeur, type, nombre, adresse, adresse du type, etc.

Question 2f
===========

Les limitations du projet sont les suivantes :
15 instructions consécutives maximum par processus
9 processus maximum
9 semaphores maximum

Questions 3*
============

Explication d'int5
------------------

###############
### log.txt ###
###############

300 0 1 304 404 65 0 0 0 0 0 // Ligne 4743 de log.txt
400 0 0 0 0 1 0 0 0 0 0      // La valeur 1 est à @404 et correspond au type de l'item (0:int ou 1:char)

300 : @ ds la mémoire du noyau
0   : valeur (input ou ->output)                // @300
1   : nombre d'items                            // @301
304 : @ de l'item                               // @302 \ Contiennent une valeur
404 : @ du type de l'item                       // @303 / correspondant à une @
65  : valeur ASCII de l'item qui est un char    // @304

##########################
### Proc_0_Program.asm ###
##########################

# R2 : nombre d'items
# R3 : @ du premier item
# R4 : @ du type pour un item

#...
SETRI R7 301       ; on stocke la valeur 301 (qui sera une @) dans R7
STMEM R7 R5        ; on stocke la valeur 1 à R7, donc à l'@301, correspond à 1 item
LDPRM R1 R3 R6     ; on charge R3 (@ du premier item) du processus R1 dans R6
SETRI R8 304       ; on stocke la valeur 304 (qui sera une @) dans R8
STMEM R8 R6        ; on stocke la valeur de l'item à R6, donc à l'@304
SETRI R7 302       ; on stocke la valeur 302 (qui sera une @) dans R7
STMEM R7 R8        ; on stocke la valeur 304 à R7, donc à l'@302
LDPRM R1 R4 R7     ; on charge R4 (@ du type de l'item) du processus R1 pour récupérer la valeur du type (0:int/1:char) qu'on stocke dans R7
SETRI R8 404       ; on stocke la valeur 404 (qui sera une @) dans R8 (qui contenait la valeur '304')
STMEM R8 R7        ; on stocke le type de l'item à R8, donc à l'@404
SETRI R7 303       ; on stocke la valeur 303 (qui sera une @) dans R7
STMEM R7 R8        ; on stocke le type de l'item à R7, donc à l'@303
SETRI R7 300       ; on stocke la valeur 300 (qui sera une @) dans R7
STMEM R7 R5        ; on stocke la valeur 1 à R7, donc à l'@300 ce qui déclenche un consoleInOut.output() // ce qui est curieux car on a 0 à @300
JMBSI $int1        ; on retourne à int1

Question 3a
===========

SETRI R0 0         ;LNR=$int5: consoleOut request for current process, the address where its pid is stored
LDMEM R0 R1        ;LNR R1 now has the pid of the process which is requesting the consoleOut operation
SETRI R6 20        ;LNR offset to get the process slot address from the process id
ADDRG R0 R1 R6     ;LNR R0 now contains the process slot address
SETRI R5 1         ;LNR the readyToRun state
STMEM R0 R5        ;LNR store the readyToRun state for the current process

SETRI R7 301       ;LNR=$boucle on stocke la valeur 301 (qui sera une @) dans R7 (début boucle)
STMEM R7 R2        ;LNR on stocke la valeur R2 à R7, donc à l'@301, correspond au nombre d'items
LDPRM R1 R3 R6     ;LNR on charge R3 (@ du premier item) du processus R1 dans R6
SETRI R8 304       ;LNR on stocke la valeur 304 (qui sera une @, qui contiendra la valeur de l'item) dans R8
STMEM R8 R6        ;LNR on stocke la valeur de l'item à R6, donc à l'@304
SETRI R7 302       ;LNR on stocke la valeur 302 (qui sera une @, qui contiendra l'@ de l'item) dans R7
STMEM R7 R8        ;LNR on stocke la valeur 304 à R7, donc à l'@302
LDPRM R1 R4 R7     ;LNR on charge R4 (@ du type de l'item) du processus R1 pour récupérer la valeur du type (0:int/1:char) qu'on stocke dans R7
SETRI R8 404       ;LNR on stocke la valeur 404 (qui sera une @, qui contiendra l'@ du type de l'item) dans R8
STMEM R8 R7        ;LNR on stocke le type de l'item à R8, donc à l'@404
SETRI R7 303       ;LNR on stocke la valeur 303 (qui sera une @, qui contiendra l'@ du type de l'item) dans R7
STMEM R7 R8        ;LNR on stocke l'@ du type de l'item à R7, donc à l'@303
SETRI R7 300       ;LNR on stocke la valeur 300 (qui sera une @) dans R7
STMEM R7 R5        ;LNR on stocke la valeur 1 à R7, donc à l'@300, ce qui déclenche un consoleInOut.output()

ADDRG R3 R3 R5     ;LNR on incrémente R3 pour obtenir l'@ du deuxième item
ADDRG R4 R4 R5     ;LNR on incrémente R4 pour obtenir l'@ du type du deuxième item
SUBRG R9 R2 R5     ;LNR on décrémente le nombre d'items : R9 <- #items - 1

JNZRI R9 $boucle   ;LNR on boucle si R9 (nombre d'items) != 0
JMBSI $int1        ;LNR on retourne à int1

Question 3b
===========

Ecriture d'int6
---------------

SETRI R0 0         ;LNR=$int5: consoleOut request for current process, the address where its pid is stored
LDMEM R0 R1        ;LNR R1 now has the pid of the process which is requesting the consoleOut operation
SETRI R6 20        ;LNR offset to get the process slot address from the process id
ADDRG R0 R1 R6     ;LNR R0 now contains the process slot address
SETRI R5 1         ;LNR the readyToRun state
STMEM R0 R5        ;LNR store the readyToRun state for the current process

SETRI R9 0         ; on stocke la valeur 0 (qui déclenchera input()) dans R

# ...              ; Faut-il garder la même chose que fait précédemment dans int5 au même endroit ? À priori, oui.

SETRI R7 300       ; on stocke la valeur 300 (qui sera une @) dans R7
STMEM R7 R9        ; on stocke la valeur 0 à R7, donc à l'@300 ce qui déclenche un consoleInOut.input()

ADDRG R3 R3 R5     ;LNR on incrémente R3 pour obtenir l'@ du deuxième item
ADDRG R4 R4 R5     ;LNR on incrémente R4 pour obtenir l'@ du type du deuxième item
SUBRG R9 R2 R5     ;LNR on décrémente le nombre d'items : R9 <- #items - 1

JNZRI R9 $boucle   ;LNR on boucle si R9 (nombre d'items) != 0
JMBSI $int1        ;LNR on retourne à int1

Question 3c
===========

On voit bien que Proc_1_Program.asm est le consommateur, tandis que Proc_2_Program.asm est le producteur.
En effet, ce dernier stocke une valeur dans la mémoire partagée. Cette valeur est ensuite récupérée et utilisée par Proc_1_Program.asm

Pour répondre à la question, il faut donc :
    -> Ecrire les valeurs de 1 à 10 (de @11 à @20) dans la mémoire partagée via Proc_2_Program.asm
    -> Les lire en écrivant un nombre à la fois dans la zone critique via Proc_1_Program.asm

##############
# Producteur #
##############

SETRI R0 0        ; on récupère la sémaphore
SETRI R2 1        ; on stocke la valeur 1 dans R2, correspond à la fois au code de P() et au nombre de semops
SETRI R3 215      ; on stocke la valeur 215 (qui sera une @) dans R3
STMEM R3 R0       ; on stocke la valeur 0 (index de la semaphore) à R3, donc à l'@215
ADDRG R3 R3 R2    ; R3 contient l'@215+1, donc l'@216
STMEM R3 R2       ; on stocke la valeur 1 (code de P()) à R3, donc à l'@216
SETRI R3 225      ; on stocke la valeur 225 (qui sera une @) dans R3
STMEM R3 R0       ; on stocke la valeur 0 (index de la semaphore) à R3, donc à l'@225
ADDRG R3 R3 R2    ; R3 contient l'@225+1, donc l'@226
STMEM R3 R0       ; on stocke la valeur 0 (code de V()) à R3, donc à l'@226

# Début zone intéressante #

SETRI R5 10       ; on stocke la valeur 10 (qui sera une @) dans R5, correspond à l'@ de la mémoire partagée
SETRI R4 4        ; on stocke la valeur 4 dans R4, correspond à l'int4
SETRI R6 65       ; on stocke la valeur 65 dans R6, correspond à la valeur à écrire dans la mémoire partagée
SETRI R3 215      ; on stocke la valeur 215 (qui sera une @, celle de P()) dans R3
CLINT R4          ; on appelle int4, donc P()
STSHM R5 R6       ; on stocke la valeur 65 à R5, donc à l'@10 de la mémoire partagée    ## <- intervention mémoire partagée (stockage) ##
SETRI R3 225      ; on stocke la valeur 225 (qui sera une @, celle de V()) dans R3
CLINT R4          ; on appelle int4 à nouveau, donc V()

# Fin zone intéressante #

SETRI R9 2        ; on stocke la valeur 2 dans R9, correspond à int2
CLINT R9          ; on appelle int2, ce qui termine le processus

# @ à réserver        : @11 - @20
# valeurs à stocker   :  1  -  10

# @ réservée          : @10
# valeur stockée      : 65

R7 <- @dresses
R8 <- valeurs

Idée : introduire une boucle pour incrémenter les adresses + valeurs
------

Il faut alors commencer avec R7 <- @11 et
                             R8 <-  1

Compteur       : R10
Incrémentation : ADDRG x2 (R7, R8)
Décrémentation : SUBRG (R10)
Boucle         : JNZRI (R10 != 0), boucler

Reprise de la zone intéressante :
---------------------------------

SETRI R5 10       ;LNR on stocke la valeur 10 (qui sera une @) dans R5, correspond à l'@ de la mémoire partagée
SETRI R4 4        ;LNR on stocke la valeur 4 dans R4, correspond à l'int4
SETRI R6 65       ;LNR on stocke la valeur 65 dans R6, correspond à la valeur à écrire dans la mémoire partagée
SETRI R3 215      ;LNR on stocke la valeur 215 (qui sera une @, celle de P()) dans R3
CLINT R4          ;LNR on appelle int4, donc P()

STSHM R5 R6       ;LNR on stocke la valeur 65 à R5, donc à l'@10 de la mémoire partagée    ## <- intervention mémoire partagée (stockage) ##

SETRI R3 225      ;LNR on stocke la valeur 225 (qui sera une @, celle de V()) dans R3
CLINT R4          ;LNR on appelle int4 à nouveau, donc V()

# Ajout de valeurs dans la mémoire partagée

SETRI R10 10      ;LNR compteur initialisé à 10
SETRI R7 11       ;LNR première @ (de la mem partagée) stockée dans R7
SETRI R8 1        ;LNR première valeur à écrire, stockée dans R8
SETRI R3 215      ;LNR=$boucle on stocke la valeur 215 (qui sera une @, celle de P()) dans R3
CLINT R4          ;LNR on appelle int4, donc P()

STSHM R8 R7       ;LNR on stocke la première valeur (1) dans la première @ (11)

SETRI R3 225      ;LNR on stocke la valeur 225 (qui sera une @, celle de V()) dans R3
CLINT R4          ;LNR on appelle int4 à nouveau, donc V()
ADDRG R7 R7 R2    ;LNR on incrémente les @ (R7 <- 11+1)
ADDRG R8 R8 R2    ;LNR on incrémente les valeurs (R8 <- 1+1)
SUBRG R10 R2      ;LNR on décrémente le compteur
JNZRI R10 $boucle ;LNR si R10 != 0, on boucle
SETRI R9 2        ;LNR on stocke la valeur 2 dans R9, correspond à int2
CLINT R9          ;LNR on appelle int2, ce qui termine le processus

# Les valeurs des @ de P() et V() doivent peut-être changer pour marquer le fait qu'on utilise 2 sémaphores...
 
################
# Consommateur #
################

# SETRI R0 0        ; on récupère la semaphore
# SETRI R2 1        ; on stocke la valeur 1 dans R2, correspond à la fois le code de P() et le nombre de semops
# SETRI R3 210      ; on stocke la valeur 210 (qui sera une @) dans R3
# STMEM R3 R0       ; on stocke la valeur 0 à R3, donc à l'@210
# ADDRG R3 R3 R2    ; on stocke la valeur 210+1=211 (qui sera une @) dans R3
# STMEM R3 R2       ; on stocke la valeur 1 à R3, donc à l'@211
# SETRI R3 220      ; on stocke la valeur 220 (qui sera une @) dans R3
# STMEM R3 R0       ; on stocke la valeur 0 à R3 donc à l'@220
# ADDRG R3 R3 R2    ; on stocke la valeur 220+1=221 (qui sera une @) dans R3
# STMEM R3 R0       ; on stocke la valeur 0 à R3, donc à l'@221
# SETRI R5 10       ; on stocke la valeur 10 (@ de la mémoire partagée) dans R5
# SETRI R4 4        ; on stocke la valeur 4 dans R4, correspond à int4
# SETRI R3 210      ; on stocke la valeur 210 (qui sera une @, pour la semop P()) dans R3
# CLINT R4          ; on appelle int4, donc P()
# LDSHM R5 R6       ; on charge la valeur de la mémoire partagée dans R6, donc R6 = 65 (au début, valeur de l'@10 de la mémoire partagée) ## <- intervention mémoire partagée (chargement) ##
# SETRI R3 220      ; on stocke la valeur 220 (qui sera une @, pour la semop V()) dans R3
# CLINT R4          ; on appelle int4 à nouveau, donc V()

# ADDRG R5 R5 R2    ; on incrémente la valeur de R5 (qui contient les @ de la mémoire partagée)

# JZROI R6 -7       ; si R6=0, alors on boucle à la ligne 45 (pour pouvoir rentrer à nouveau en zone critique) le -7, signifie retour de 6 lignes en arrière, cette ligne incluse.
# SETRI R3 300      ; on stocke la valeur 300 (qui sera une @, CONSOLEI/OTRIGGER) dans R3
# STMEM R3 R6       ; on stocke la valeur de la mémoire partagée (65) à R3, donc à l'@300                                       ## <- intervention mémoire partagée ##
# SETRI R4 380      ; on stocke la valeur 380 (qui sera une @) dans R4
# SETRI R1 1        ; on stocke la valeur 1 dans R1, correspond au type de l'item (char en l'occurrence)  ## Étant donné que les valeurs ajoutées ne correspondent pas à une valeur ASCII d'un char, on devrait peut-être changer le type ##
# STMEM R4 R1       ; on stocke la valeur 1 à R4, donc le type à l'@380
# SETRI R2 1        ; on stocke la valeur 1 dans R2, correspond au nombre d'items (1 seul)
# SETRI R0 5        ; on stocke la valeur 5 dans R0, correspond à la valeur de l'interruption : int5
# CLINT R0          ; on appelle int5
# SETRI R9 2        ; on stocke la valeur 2 dans R9, correspond à la valeur de l'interruption : int2
# CLINT R9          ; on appelle int2

Question 3d
===========

